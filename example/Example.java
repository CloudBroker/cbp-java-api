/*** Copyright 2015 CloudBroker GmbH, Zurich, Switzerland** Licensed under the Apache License, Version 2.0 (the "License");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an "AS IS" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.** For additional information, contact:* email: platform@cloudbroker.com**/import java.io.IOException;import java.util.HashMap;import java.util.List;import com.cloudbroker.platform.api.core.CloudbrokerClient;import com.cloudbroker.platform.api.data.DataFile;import com.cloudbroker.platform.api.data.DataType;import com.cloudbroker.platform.api.data.Executable;import com.cloudbroker.platform.api.data.Fee;import com.cloudbroker.platform.api.data.InstanceType;import com.cloudbroker.platform.api.data.Job;import com.cloudbroker.platform.api.data.Region;import com.cloudbroker.platform.api.data.Resource;import com.cloudbroker.platform.api.data.Software;public class Example {	public static void main(String[] args) throws IOException,			ClassNotFoundException {				/**		 * 		 * @param username		 *            - your email for CB		 * @param password		 *            - your password for CB		 * @param host		 *            - base address where requests should be sent, like		 *            scibus.cloudbroker.com		 * @param port		 *            - port to be used. Defaults for http(80) and https(443) are		 *            also to be specified		 * @return client to be used		 */		CloudbrokerClient cloudbrokerClient = CloudbrokerClient.getInstance(				"my@email.com", "pass1234",				"platform.cloudbroker.com", 443);				// Get lists of data		List<Executable> executables = cloudbrokerClient.listExecutables();		List<Job> jobs = cloudbrokerClient.list(Job.class);				// Get an object by id        Executable executable = cloudbrokerClient.get(Executable.class, "d056babd-bede-4500-9d68-dd51ef64c5d6");        Software software = cloudbrokerClient.get(Software.class, "df6ed760-db61-4538-93c6-efe953f95fab");                // Get an object by name        Resource resource = cloudbrokerClient.findByName(Resource.class, "Amazon EC2 CloudBroker GmbH");        Region region = cloudbrokerClient.findByName(Region.class, "Amazon EC2 CloudBroker GmbH US East (Northern Virginia)");        InstanceType instanceType = cloudbrokerClient.findByName(InstanceType.class, "Amazon EC2 CloudBroker GmbH Micro - 64 bit");        DataType dataType = cloudbrokerClient.findByName(DataType.class, "input");                // Get estimated cost for job creation        double filesSize = 17 * 1024; // estimated size of the data files, bytes        int nodes = 1; // number of instances to launch        cloudbrokerClient.getEstimatedCostForJob(software.getId(), resource.getId(), region.getId(), instanceType.getId(), filesSize, nodes);                // Create a job (alternatively "wizard" methods can be used : createAndSubmitJob)        Job job = new Job();        job.setArchiveOutput(false); // if set to true - all output files are returned in a single archive        job.setArgumentString("-f 05");        job.setExecutable(executable);        job.setName("My API Job");        job.setNodes(1);        job.setInstanceTypeID(instanceType.getId());        job.setRegionID(region.getId());        job.setExecutable(executable);        cloudbrokerClient.save(job);                // Get estimated costs for data file creation        HashMap<Integer, Double> resHash = cloudbrokerClient.getEstimatedCostForDataFile(job.getId());                // Add a data file        DataFile dataFile = new DataFile();        dataFile.setPathToFile("~/cloudbroker_data/job_4/input.brl");        dataFile.setDataType(dataType);        dataFile.setJobID(job.getId());        cloudbrokerClient.save(dataFile);                // Submit a job        cloudbrokerClient.submitJob(job);                // check if job is completed        job = cloudbrokerClient.get(Job.class, job.getId());        if (job.getStatus().equals("completed")) {        	System.out.println("Job is completed");        }                // Download data files to a local folder        cloudbrokerClient.downloadJobOutputFilesTo(job, "~/cloudbroker_data/job_4/outputs");                // Delete data files from remote storage        cloudbrokerClient.deleteJobDataFiles(job);                // Get result costs of a job        List<Fee> fees = cloudbrokerClient.getCostsFor(job);        // Copy a job inside the CloudBroker Platform        cloudbrokerClient.copyJob(job, "New job name");	        //NOTE: Please see CLoudBroker Platform REST API Usage Manual for more details	}}